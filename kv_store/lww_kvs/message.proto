package communication;

message Request {
  message Tuple {
    required string key = 1;
    optional string value = 2;
    optional uint64 timestamp = 3;
    optional uint32 num_address = 4;
  }
  required string type = 1;
  optional string respond_address = 2;
  repeated Tuple tuple = 3;
  optional string request_id = 4;
}

message Response {
  message Tuple {
    required uint32 err_number = 1;
    required string key = 2;
    optional string value = 3;
    optional uint64 timestamp = 4;
    optional bool invalidate = 5;
    repeated string addresses = 6;
  }
  repeated Tuple tuple = 1;
  optional string response_id = 2;
}

message Key_Request {
  required string respond_address = 1;
  repeated string keys = 2;
  optional string request_id = 3;
}

message Key_Response {
  message Tuple {
    required string key = 1;
    repeated string addresses = 2;
  }
  repeated Tuple tuple = 1;
  optional string response_id = 2;
}

message Payload {
  required string value = 1;
  required int64 timestamp = 2;
}

message Replication_Factor_Request {
  message Global {
    required uint32 tier_id = 1;
    required uint32 global_replication = 2;
  }
  message Local {
    required string ip = 1;
    required uint32 local_replication = 2;
  }
  message Tuple {
    required string key = 1;
    repeated Global global = 2;
    repeated Local local = 3;
  }
  repeated Tuple tuple = 1;
}

message Replication_Factor {
  message Global {
    required uint32 tier_id = 1;
    required uint32 global_replication = 2;
  }
  message Local {
    required string ip = 1;
    required uint32 local_replication = 2;
  }
  repeated Global global = 1;
  repeated Local local = 2;
}

message Server_Stat {
  required uint64 storage_consumption = 1;
  required double occupancy = 2;
  required uint32 epoch = 3;
}

message Key_Access {
  message Tuple {
    required string key = 1;
    required uint32 access = 2;
  }
  repeated Tuple tuple = 1;
}

message Address {
  message Tuple {
    required uint32 tier_id = 1;
    required string ip = 2;
  }
  required uint64 start_time = 1;
  repeated Tuple tuple = 2;
}

message Latency {
  required string uid = 1;
  optional double latency = 2;
  optional bool finish = 3;
}
